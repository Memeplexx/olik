"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[209],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return g}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=d(n),g=a,m=u["".concat(l,".").concat(g)]||u[g]||p[g]||o;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9061:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_label:"Writing state",sidebar_position:3},l="Writing state",d={unversionedId:"writing_state",id:"writing_state",title:"Writing state",description:"Olik exposes a standardized set of state-update primitives to make the developer experience as transparent, consistent, and debuggable as possible.",source:"@site/docs/2_writing_state.md",sourceDirName:".",slug:"/writing_state",permalink:"/Olik/docs/writing_state",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Writing state",sidebar_position:3},sidebar:"defaultSidebar",previous:{title:"Getting started",permalink:"/Olik/docs/getting_started"},next:{title:"Reading state",permalink:"/Olik/docs/reading_state"}},c=[{value:"Olik exposes a standardized set of state-update primitives to make the developer experience as transparent, consistent, and debuggable as possible.",id:"olik-exposes-a-standardized-set-of-state-update-primitives-to-make-the-developer-experience-as-transparent-consistent-and-debuggable-as-possible",children:[],level:4},{value:"Writing <strong>object and primitive</strong> nodes",id:"writing-object-and-primitive-nodes",children:[],level:3},{value:"Writing <strong>array</strong> nodes",id:"writing-array-nodes",children:[],level:3},{value:"Writing <strong>array element</strong> nodes",id:"writing-array-element-nodes",children:[],level:3},{value:"Performing <strong>many writes</strong> at once",id:"performing-many-writes-at-once",children:[],level:3}],p={toc:c};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"writing-state"},"Writing state"),(0,o.kt)("h4",{id:"olik-exposes-a-standardized-set-of-state-update-primitives-to-make-the-developer-experience-as-transparent-consistent-and-debuggable-as-possible"},"Olik exposes a standardized set of state-update primitives to make the developer experience as transparent, consistent, and debuggable as possible."),(0,o.kt)("hr",null),(0,o.kt)("p",null,"\ud83e\udd5a Let's begin with the following store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore } from 'olik'\n\nconst store = createStore({\n  name: document.title,\n  state: {\n    user: { firstName: '', lastName: '', job: { title: '', contractor: false } },\n    todos: new Array<{ id: number, name: string, done: boolean, urgency: number }>(),\n  }\n});\n")),(0,o.kt)("h3",{id:"writing-object-and-primitive-nodes"},"Writing ",(0,o.kt)("strong",{parentName:"h3"},"object and primitive")," nodes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// REPLACE USERS AGE WITH 29\nstore.user.age\n  .$replace(29)\n\n// ADD 1 TO USERS AGE\nstore.user.age\n  .$add(1)\n\n// UPDATE SOME, BUT NOT ALL, USERS DETAILS\nstore.user\n  .$patch({ firstName: 'Jeff', lastName: 'Anderson' })\n\n// DEEP-MERGE USER OBJECT\nstore.user\n  .$deepMerge({ age: 21, job: { contractor: true } } )\n")),(0,o.kt)("h3",{id:"writing-array-nodes"},"Writing ",(0,o.kt)("strong",{parentName:"h3"},"array")," nodes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// REMOVE ALL TODOS\nstore.todos\n  .$clear()\n\n// INSERT ONE TODO\nstore.todos\n  .$insertOne(todo)\n\n// INSERT MANY TODOS\nstore.todos\n  .$insertMany(arrayOfTodos)\n\n// INSERT ONE TODO (IF IT DOES NOT ALREADY EXIST) OR UPDATE IT (IF IT DOES)\nstore.todos\n  .$upsertMatching.id\n  .$withOne(todo)\n\n// INSERT MANY TODOS (IF THEY DO NOT ALREADY EXIST) OR UPDATE THEM (IF THEY DO)\nstore.todos\n  .$upsertMatching.id\n  .$withMany(arrayOfTodos)\n")),(0,o.kt)("h3",{id:"writing-array-element-nodes"},"Writing ",(0,o.kt)("strong",{parentName:"h3"},"array element")," nodes"),(0,o.kt)("p",null,"In order for the library to generate highly descriptive action types, searching for array elements looks a little different from what you might expect.",(0,o.kt)("br",null),"\nNote: in the following examples ",(0,o.kt)("inlineCode",{parentName:"p"},"find")," is interchangeable with ",(0,o.kt)("inlineCode",{parentName:"p"},"filter"),".  "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// FIND A TODO BY ITS ID AND REPLACE IT\nstore.todos\n  .$find.id.$eq(3)\n  .$replace(todo)\n\n// FIND A TODO BY ITS ID AND REMOVE IT\nstore.todos\n  .$find.id.$eq(3)\n  .$remove()\n\n// FIND A TODO BY ITS ID AND PARTIALLY UPDATE AN IT\nstore.todos\n  .$find.id.$eq(3)\n  .$patch({ done: true, urgency: 1 })\n\n// FIND A TODO BY ITS ID AND REPLACE ITS URGENCY\nstore.todos\n  .$find.id.$eq(3)\n  .urgency.$replace(5)\n\n// APPLY MULTIPLE SEARCH CLAUSES WITH DIFFERENT COMPARATORS\nstore.todos\n  .$filter.done.$eq(true).$or.urgency.$lt(3)\n  .$remove()\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"performing-many-writes-at-once"},"Performing ",(0,o.kt)("strong",{parentName:"h3"},"many writes")," at once"),(0,o.kt)("p",null,"Avoid unnecessary render cycles by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"transact()")," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { transact } from /* whichever version of olik you've installed */\n\ntransact(\n  () => store.user.$patch({ firstName: 'James', lastName: 'White' }),\n  () => store.todos.$clear(),\n)\n")))}u.isMDXComponent=!0}}]);