"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[170],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=r,f=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(f,s(s({ref:t},c),{},{components:n})):a.createElement(f,s({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var u=2;u<o;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8215:function(e,t,n){var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},6396:function(e,t,n){n.d(t,{Z:function(){return p}});var a=n(7462),r=n(7294),o=n(2389),s=n(9443);var l=function(){var e=(0,r.useContext)(s.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},i=n(3616),u=n(6010),c="tabItem_vU9c";function d(e){var t,n,o,s=e.lazy,d=e.block,p=e.defaultValue,m=e.values,f=e.groupId,h=e.className,g=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=m?m:g.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),y=(0,i.lx)(v,(function(e,t){return e.value===t.value}));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===p?p:null!=(t=null!=p?p:null==(n=g.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(o=g[0])?void 0:o.props.value;if(null!==k&&!v.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+v.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var b=l(),N=b.tabGroupChoices,w=b.setTabGroupChoices,T=(0,r.useState)(k),x=T[0],O=T[1],j=[],$=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=f){var E=N[f];null!=E&&E!==x&&v.some((function(e){return e.value===E}))&&O(E)}var C=function(e){var t=e.currentTarget,n=j.indexOf(t),a=v[n].value;a!==x&&($(t),O(a),null!=f&&w(f,a))},A=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a=j.indexOf(e.currentTarget)+1;n=j[a]||j[0];break;case"ArrowLeft":var r=j.indexOf(e.currentTarget)-1;n=j[r]||j[j.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":d},h)},v.map((function(e){var t=e.value,n=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:function(e){return j.push(e)},onKeyDown:A,onFocus:C,onClick:C},o,{className:(0,u.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":x===t})}),null!=n?n:t)}))),s?(0,r.cloneElement)(g.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},g.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function p(e){var t=(0,o.Z)();return r.createElement(d,(0,a.Z)({key:String(t)},e))}},1399:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return p},default:function(){return f}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),s=n(6396),l=n(8215),i=["components"],u={sidebar_label:"Async state"},c="Async state",d={unversionedId:"async_state",id:"async_state",title:"Async state",description:"Asynchronous updates are almost identical to synchronous updates, except that the payload is a function returning a promise.",source:"@site/docs/4_async_state.mdx",sourceDirName:".",slug:"/async_state",permalink:"/olik/docs/async_state",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Async state"},sidebar:"defaultSidebar",previous:{title:"Reading state",permalink:"/olik/docs/reading_state"},next:{title:"Nesting stores",permalink:"/olik/docs/nesting_stores"}},p=[{value:"Asynchronous updates are almost identical to synchronous updates, except that the payload is a function returning a promise.",id:"asynchronous-updates-are-almost-identical-to-synchronous-updates-except-that-the-payload-is-a-function-returning-a-promise",children:[],level:4},{value:"Reading async state",id:"reading-async-state",children:[],level:3},{value:"Writing async state",id:"writing-async-state",children:[],level:3},{value:"Caching data",id:"caching-data",children:[],level:3},{value:"Invalidating caches",id:"invalidating-caches",children:[],level:3},{value:"Eager updates",id:"eager-updates",children:[],level:3},{value:"Co-locating endpoints using <code>defineQuery()</code>",id:"co-locating-endpoints-using-definequery",children:[],level:3}],m={toc:p};function f(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"async-state"},"Async state"),(0,o.kt)("h4",{id:"asynchronous-updates-are-almost-identical-to-synchronous-updates-except-that-the-payload-is-a-function-returning-a-promise"},"Asynchronous updates are almost identical to synchronous updates, except that the payload is a function returning a promise."),(0,o.kt)("hr",null),(0,o.kt)("div",{className:"lets-begin"},(0,o.kt)("img",null)," Let's begin with the following store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore, enableAsyncActionPayloads } from 'olik'\n\ntype Todo = { id: number, title: string }\nconst store = createStore({\n  name: document.title,\n  state: { todos: new Array<Todo>() }\n})\n\nenableAsyncActionPayloads()\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"reading-async-state"},"Reading async state"),(0,o.kt)(s.Z,{groupId:"frameworks",mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"native",label:(0,o.kt)("div",{className:"tab-ts"}),mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"store.todos\n  .$replace(() => fetch('http://api.dev/todos').then(res => res.json()))\n"))),(0,o.kt)(l.Z,{value:"react",label:(0,o.kt)("div",{className:"tab-react"}),mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const Component = () => {\n  const future = store.todos\n    .$replace(() => fetch('http://api.dev/todos').then(res => res.json()))\n    .$useFuture()\n  return (\n    <>\n      {future.isLoading && <div>loading todos...</div>}\n      {future.wasRejected && <div>error loading todos: {future.error}</div>}\n      {future.wasResolved && future.storeValue.map(todo =>\n        <div key={todo.id}>{todo.title}</div>\n      )}\n    </>\n  )\n}\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/olik-react-fetch-nj702"},(0,o.kt)("strong",{parentName:"a"},"Demo \ud83e\udd5a ")))),(0,o.kt)(l.Z,{value:"angular",label:(0,o.kt)("div",{className:"tab-ng"}),mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"@Component({...})\nclass MyComponent {\n\n  constructor(private httpClient: HttpClient) { }\n\n  todos$ = store.todos\n    .$replace(() => this.httpClient.get('http://api.dev/todos'))\n    .$asObservableFuture()\n  )\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<ng-container *ngIf="todos$ | async; let todos;">\n  <div *ngIf="todos.isLoading">\n    Fetching todos...\n  </div>\n  <div *ngIf="todos.wasRejected">\n    Failed to fetch todos with error {{todos.error}}\n  </div>\n  <ul *ngIf="todos.wasResolved">\n    <li *ngFor="let todo of todos.storeValue">\n      {{todo.title}}\n    </li>\n  </ul>\n</ng-container>\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/olik-ng-async-5y3hd?file=/src/app/app.component.ts"},(0,o.kt)("strong",{parentName:"a"},"Demo \ud83e\udd5a")))),(0,o.kt)(l.Z,{value:"svelte",label:(0,o.kt)("div",{className:"tab-svelte"}),mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const future = store.todos\n  .$replace(() => fetch('https://api.dev/todos').then(res => res.json()))\n  .$observe({ fetchImmediately: true });\n\n{#if $future.isLoading}\n  <div>loading...</div>\n{/if}\n{#if $future.wasResolved}\n  {#each $future.storeValue as todo}\n    <li>{todo.title}</li>\n  {/each}\n{/if}\n{#if $future.wasRejected}\n  <div>Sorry, the following error occurred: {$future.error}</div>\n{/if}\n\n<button on:click={future.get}>Re-fetch</button>\n")))),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"writing-async-state"},"Writing async state"),(0,o.kt)("p",null,"Let's start with the following function"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const updateTodo = (todo: Todo) => () => fetch(`https://api.dev/todo/${todo.id}`, {\n  method: 'POST',\n  body: JSON.stringify(todo),\n}).then(res => res.json())\n")),(0,o.kt)("p",null,"Updating state (assuming that the API returnes the updated todo)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"store.todos\n  .$find.id.$eq(3)\n  .$replace(updateTodo(todo));\n")),(0,o.kt)("p",null,"Update state (assuming that the API does not return the updated todo)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"updateTodo(todo)\n  .then(() => store.todos\n    .$find.id.$eq(3)\n    .$replace(todo));\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/writing-async-state-r8rs6?file=/src/index.ts"},(0,o.kt)("strong",{parentName:"a"},"Demo \ud83e\udd5a"))),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"caching-data"},"Caching data"),(0,o.kt)("p",null,"The library uses your store as a cache and will not re-fetch for a specified number of milliseconds."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"store.todos\n  .$replace(() => fetch('https://api/todos').then(res => res.json()),\n  { cache: 1000 * 60 })\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/olik-demo-caching-data-no-framework-3rvz9?file=/src/index.ts"},(0,o.kt)("strong",{parentName:"a"},"Demo \ud83e\udd5a"))),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"invalidating-caches"},"Invalidating caches"),(0,o.kt)("p",null,"The following ensures that any data cached on the selected node is re-fetched the next time a promise is used to populate this node."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"store.todos\n  .$invalidateCache()\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/olik-demo-cache-invalidation-no-framework-efore?file=/src/index.ts"},(0,o.kt)("strong",{parentName:"a"},"Demo \ud83e\udd5a"))),(0,o.kt)("h3",{id:"eager-updates"},"Eager updates"),(0,o.kt)("p",null,"You can make immediate updates, which will be rolled back if an error is thrown."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const updateUserStatus = (isAdmin: boolean) => {\n  store.user.isAdmin\n    .$replace(\n      () => fetch(`https://api/user/admin/${isAdmin}`).then(res => res.json()),\n      { eager: isAdmin }\n    ),\n}\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"co-locating-endpoints-using-definequery"},"Co-locating endpoints using ",(0,o.kt)("inlineCode",{parentName:"h3"},"defineQuery()")),(0,o.kt)("p",null,"It may be more managable to define your endpoints, caching, and optimistic updates in one place."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="endpoints.ts"',title:'"endpoints.ts"'},"import { defineQuery } from 'olik';\n\nconst fetchTodosQuery = defineQuery({\n  query: () => fetch(`https://api.dev/todos`).then(res => res.json()),\n  cache: 1000 * 60,\n})\n\nconst updateTodoQuery = (arg: Todo) => defineQuery({\n  query: () => fetch(`https://api.dev/todos`).then(res => res.json()),\n  eager: arg,\n});\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="component.ts"',title:'"component.ts"'},"const fetchTodos = () => {\n  store.todos.$replace(...fetchTodosQuery);\n}\n\nconst updateTodo = (todo: Todo) => {\n  store.todos.$find.id.$eq(3).$replace(...updateTodoQuery(todo));\n}\n")))}f.isMDXComponent=!0}}]);