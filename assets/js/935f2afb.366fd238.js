"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:function(e){e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"defaultSidebar":[{"type":"link","label":"Getting started","href":"/Olik/docs/getting_started","docId":"getting_started"},{"type":"link","label":"Writing state","href":"/Olik/docs/writing_state","docId":"writing_state"},{"type":"category","label":"Reading state","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"React","href":"/Olik/docs/reading_state/react","docId":"reading_state/react"},{"type":"link","label":"Angular","href":"/Olik/docs/reading_state/angular","docId":"reading_state/angular"}],"href":"/Olik/docs/reading_state/"},{"type":"category","label":"Async state","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"React","href":"/Olik/docs/async_state/react","docId":"async_state/react"},{"type":"link","label":"Angular","href":"/Olik/docs/async_state/angular","docId":"async_state/angular"}],"href":"/Olik/docs/async_state/"},{"type":"category","label":"Nesting stores","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"React","href":"/Olik/docs/nesting_stores/react","docId":"nesting_stores/react"},{"type":"link","label":"Angular","href":"/Olik/docs/nesting_stores/angular","docId":"nesting_stores/angular"}],"href":"/Olik/docs/nesting_stores/"}]},"docs":{"async_state/angular":{"id":"async_state/angular","title":"Handling async state with Angular","description":"\ud83e\udd5a Let\'s begin with the following store and service:","sidebar":"defaultSidebar"},"async_state/index":{"id":"async_state/index","title":"Async state","description":"Instead of updating state with a value, you can update it with a function returning a promise.","sidebar":"defaultSidebar"},"async_state/react":{"id":"async_state/react","title":"Handling async state with React","description":"Observing fetches","sidebar":"defaultSidebar"},"getting_started":{"id":"getting_started","title":"Getting started","description":"Olik is designed to be framework-agnostic, however wrapper libs exist for a growing number of frameworks.","sidebar":"defaultSidebar"},"nesting_stores/angular":{"id":"nesting_stores/angular","title":"Nesting stores with Angular","description":"\ud83e\udd5a Let\'s begin with the following store:","sidebar":"defaultSidebar"},"nesting_stores/index":{"id":"nesting_stores/index","title":"Nesting stores","description":"You can nest a component-level store within your application-level store. This allows you to track its state together with your application state.","sidebar":"defaultSidebar"},"nesting_stores/react":{"id":"nesting_stores/react","title":"Nesting stores with React","description":"\ud83e\udd5a Let\'s begin with the following store:","sidebar":"defaultSidebar"},"reading_state/angular":{"id":"reading_state/angular","title":"Reading state with Angular","description":"Olik-NG contains functions to read state and memoise expensive derivations","sidebar":"defaultSidebar"},"reading_state/index":{"id":"reading_state/index","title":"Reading state","description":"Olik supports synchonous reads and the ability to listen for updates to a node","sidebar":"defaultSidebar"},"reading_state/react":{"id":"reading_state/react","title":"Reading state with React","description":"Olik-React contains hooks to read state and memoise expensive derivations","sidebar":"defaultSidebar"},"writing_state":{"id":"writing_state","title":"Writing state","description":"Olik exposes a standardized set of state-update primitives to make the developer experience as transparent, consistent, and debuggable as possible.","sidebar":"defaultSidebar"}}}')}}]);